# Production Docker Compose for Postiz
# Use this for self-hosted deployments on VPS/dedicated servers

version: '3.8'

services:
  # Database
  postiz-postgres:
    image: postgres:17-alpine
    container_name: postiz-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-postiz}
      POSTGRES_USER: ${POSTGRES_USER:-postiz}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postiz}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  postiz-redis:
    image: redis:7-alpine
    container_name: postiz-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  postiz-backend:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: backend
    container_name: postiz-backend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=2048
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postiz}:${POSTGRES_PASSWORD}@postiz-postgres:5432/${POSTGRES_DB:-postiz}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@postiz-redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_INTERNAL_URL=http://postiz-backend:3000
    ports:
      - "3000:3000"
    depends_on:
      postiz-postgres:
        condition: service_healthy
      postiz-redis:
        condition: service_healthy
    networks:
      - postiz-network
    volumes:
      - uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  postiz-frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: frontend
    container_name: postiz-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL:-http://localhost:3000}
    ports:
      - "4200:3000"
    depends_on:
      - postiz-backend
    networks:
      - postiz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workers
  postiz-workers:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: workers
    container_name: postiz-workers-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=1024
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postiz}:${POSTGRES_PASSWORD}@postiz-postgres:5432/${POSTGRES_DB:-postiz}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@postiz-redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postiz-postgres:
        condition: service_healthy
      postiz-redis:
        condition: service_healthy
    networks:
      - postiz-network
    volumes:
      - uploads:/app/uploads

  # Cron Jobs
  postiz-cron:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: cron
    container_name: postiz-cron-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=512
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postiz}:${POSTGRES_PASSWORD}@postiz-postgres:5432/${POSTGRES_DB:-postiz}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@postiz-redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postiz-postgres:
        condition: service_healthy
      postiz-redis:
        condition: service_healthy
    networks:
      - postiz-network

  # Reverse Proxy (Optional - use your own nginx if preferred)
  postiz-proxy:
    image: nginx:alpine
    container_name: postiz-proxy-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - uploads:/var/www/uploads:ro
    depends_on:
      - postiz-frontend
      - postiz-backend
    networks:
      - postiz-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  postiz-network:
    driver: bridge